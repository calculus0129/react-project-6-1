import type { Metadata } from "next";
import ReduxProvider from "./providers";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

export const metadata: Metadata = {
  title: "react-project-6-1",
  // shortname : "React App",
  description: "Generated by create next app",
  icons: [
    {
      url: "./favicon.ico",
      rel: "icon",
      sizes: "64x64 32x32 24x24 16x16",
      type: "image/x-icon",
    },
    {
      url: "/logo192.png",
      rel: "apple-touch-icon",
      sizes: "192x192",
      type: "image/png",
    },
    {
      url: "/logo512.png",
      sizes: "512x512",
      type: "image/png",
    },
  ],
  // manifest: "/manifest.json", // IDK what this is. But the file was in the project, so I added it.
  // start_url: ".",
  // display: "standalone",
  // themeColor: "#000000", // âš  Unsupported metadata themeColor is configured in metadata export in /. Please move it to viewport export instead.
  // Read more: https://nextjs.org/docs/app/api-reference/functions/generate-viewport
};

/** manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop.
 * See https://developers.google.com/web/fundamentals/web-app-manifest/
 * Notice the use of %PUBLIC_URL% in the tags above.
 *  It will be replaced with the URL of the `public` folder during the build.
 *  Only files inside the `public` folder can be referenced from the HTML.
 *
 * Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
 * work correctly both with client-side routing and a non-root public URL.
 * Learn how to configure a non-root public URL by running `npm run build`.
 */

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        {/* <body className={`${geistSans.variable} ${geistMono.variable}`}> */}
        <ReduxProvider>{children}</ReduxProvider>
      </body>
    </html>
  );
}
